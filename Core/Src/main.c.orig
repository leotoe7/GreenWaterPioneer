/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "adc.h"
#include "dma.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "cJSON.h"
#include "cJSON_test.h"
#include "rtthread.h"
#include "NMEA0183.h"
#include "DS18B20.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
extern void MX_RT_Thread_Init(void);
extern void MX_RT_Thread_Process(void);

extern uint8_t DATA_BUFF[2048], rx_flag;
extern uint8_t DATA3_BUFF[1024], rx3_flag;
extern char *strx1,*strx2,*strxPowerSwitch,*strxBrightness,*strxColor;
extern uint8_t uart3RxState;
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
uint8_t rx_flag = 0;
extern uint16_t ADC_Value[20];

extern unsigned int index;
extern uint16_t DATA_SIZE,DATA3_SIZE;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
int CJSON_CDECL cJSON_Init(void)
{
    /* print the version */
    //printf("cJSON Version: %s\n", cJSON_Version());

    /* Now some samplecode for building objects concisely: */
    //create_objects();

    return 0;
}
#ifdef L610
void L610_Init(){
	HAL_Delay(500);
	HAL_UART_Transmit(&hlpuart1,(uint8_t *)"step0\r\n",7,0xffff);
		
	//1Êü•ËØ¢ÁâàÊú¨‰ø°ÊÅØ
	HAL_UART_Transmit(&hlpuart1,(uint8_t *)"step1\r\n",7,0xffff);
	myprintf(&huart3,"ATI\r\n");
	HAL_Delay(1000);
	HAL_UART_Transmit(&hlpuart1,(uint8_t *)DATA3_BUFF,DATA3_SIZE,0xffff);
	
	strx1=strstr((const char*)DATA3_BUFF,(const char*)"Fibocom");		
	while(strx1==NULL)
	{			
		HAL_UART_Transmit(&hlpuart1,(uint8_t *)"Êü•ËØ¢‰ø°ÊÅØÂ§±Ë¥•\r\n",sizeof("Êü•ËØ¢‰ø°ÊÅØÂ§±Ë¥•\r\n"),0xffff);
		HAL_Delay(100);	
		memset(DATA3_BUFF,0,1024);		DATA3_SIZE=0;
		myprintf(&huart3,"ATI\r\n");
		HAL_Delay(2000);	
		strx1=strstr((const char*)DATA3_BUFF,(const char*)"Fibocom");		
	}
	HAL_UART_Transmit(&hlpuart1,(uint8_t *)"ÁâàÊú¨‰ø°ÊÅØÊ≠£Á°Æ\r\n",sizeof("ÁâàÊú¨‰ø°ÊÅØÊ≠£Á°Æ\r\n"),0xffff);
	HAL_Delay(100);
		memset(DATA3_BUFF,0,1024);		DATA3_SIZE=0;uart3RxState=0;
		HAL_UART_Transmit(&hlpuart1,(uint8_t *)"step2\r\n",7,0xffff);
		myprintf(&huart3,"AT+MIPCALL?\r\n");
		HAL_Delay(2000);
		HAL_UART_Transmit(&hlpuart1,(uint8_t *)DATA3_BUFF,DATA3_SIZE,0xffff);
		strx1=strstr((const char*)DATA3_BUFF,(const char*)"+MIPCALL: 1");
		while(strx1==NULL)
		{			
			HAL_UART_Transmit(&hlpuart1,(uint8_t *)"ËøòÊú™Ëé∑ÂèñÂà∞IP\r\n",sizeof("ËøòÊú™Ëé∑ÂèñÂà∞IP\r\n"),0xffff);
			HAL_Delay(100);
			memset(DATA3_BUFF,0,1024);		DATA3_SIZE=0;
			myprintf(&huart3,"AT+MIPCALL=1\r\n");
			HAL_Delay(2000);
			HAL_UART_Transmit(&hlpuart1,(uint8_t *)DATA3_BUFF,DATA3_SIZE,0xffff);
			strx1=strstr((const char*)DATA3_BUFF,(const char*)"+MIPCALL: 1");
		}
		
		HAL_UART_Transmit(&hlpuart1,(uint8_t *)"Ëé∑ÂèñÂà∞IP\r\n",sizeof("Ëé∑ÂèñÂà∞IP\r\n"),0xffff);
		HAL_Delay(100);
	
				
		//3ËÆæÁΩÆÂπ≥Âè∞ËÆæÂ§á‰ø°ÊÅØ
		HAL_UART_Transmit(&hlpuart1,(uint8_t *)"step3\r\n",7,0xffff);
		memset(DATA3_BUFF,0,1024);		DATA3_SIZE=0;
		myprintf(&huart3,"AT+MQTTOPEN=1,\"175.178.35.189\",1883,0,60\r\n");
		/*
		myprintf(&huart3,"AT+TCDEVINFOSET=1,\"X2BV7G131Q\",\"changanRoad_Lamp001\",\"ËÆæÂ§áÂØÜÈí•\"\r\n");
		HAL_Delay(1000);
	  HAL_UART_Transmit(&hlpuart1,(uint8_t *)DATA3_BUFF,DATA3_SIZE,0xffff);
		*/
		HAL_Delay(1000);
		strx1=strstr((const char*)DATA3_BUFF,(const char*)"+MQTTOPEN:1,1");		
		while(strx1==NULL)
		{			
			HAL_UART_Transmit(&hlpuart1,(uint8_t *)"Âπ≥Âè∞‰ø°ÊÅØËÆæÁΩÆÂ§±Ë¥•\r\n",sizeof("Âπ≥Âè∞‰ø°ÊÅØËÆæÁΩÆÂ§±Ë¥•\r\n"),0xffff);
			HAL_Delay(100);
		  memset(DATA3_BUFF,0,1024);		DATA3_SIZE=0;
			myprintf(&huart3,"AT+MQTTOPEN=1,\"175.178.35.189\",1883,0,60\r\n");
			HAL_Delay(2000);
			strx1=strstr((const char*)DATA3_BUFF,(const char*)"+MQTTOPEN:1,1");			
		}
		
		HAL_UART_Transmit(&hlpuart1,(uint8_t *)"Âπ≥Âè∞‰ø°ÊÅØËÆæÁΩÆÊàêÂäü\r\n",sizeof("Âπ≥Âè∞‰ø°ÊÅØËÆæÁΩÆÊàêÂäü\r\n"),0xffff);
		HAL_Delay(100);
}
#endif
void Hardware_Init()
{
	cJSON_Init();
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)&ADC_Value, 20);

  DS18B20_Init();
	DS18B20_GetTemperature(); //Ëé∑ÂèñÊ∏©Â∫¶
  HAL_Delay(1500);
  myprintf(&huart2,"$PCAS01,5*19\r\n");
  HAL_UART_DeInit(&huart2);
  USART2_Change(115200);
  // Á©∫Èó≤‰∏≠Êñ≠Êé•Êî∂
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, DATA_BUFF, 2048); // Âº?ÂêØ‰∏≤Âè£DMAÊé•Êî∂
	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, DATA3_BUFF, 1024); // ÂºøÂêØ‰∏≤Âè£DMAÊé•Êî∂
	#ifdef L610
	L610_Init();
	#endif
}
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_USART1_UART_Init();
  MX_USART2_UART_Init();
  MX_ADC1_Init();
  MX_USART3_UART_Init();
  MX_LPUART1_UART_Init();
  /* USER CODE BEGIN 2 */
  Hardware_Init();
  MX_RT_Thread_Init();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    MX_RT_Thread_Process();
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 40;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
  {
    Error_Handler();
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
}

/* USER CODE BEGIN 4 */
void USER_FNC()
{
  // myprintf(&huart1,"%s\r\n",DATA_BUFF);
  // printf("%s\r\n",DATA_BUFF);
  for (index = 0; index < DATA_SIZE; ++index)
  {
    if (nmea_decode(&nmea0183, DATA_BUFF[index]))
    {
      /// Ëß£Êûê‰ª£Á†ÅÊàêÂäü
    }
  }
  // myprintf(&huart1,"Á∫¨Â∫¶:%f,ÁªèÂ∫¶:%f\r\n",nmea0183.gpsData.location.lat,nmea0183.gpsData.location.lng);
}

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
  if (huart->Instance == USART2)
  {
    // ËøôÈáåÁöÑDMA‰∏∫NormalÊ®°Âºè
    HAL_UART_DMAStop(huart); // Â¶ÇÊûúDMA‰∏∫CircularÊ®°ÂºèÔºåÂõûË∞ÉÂáΩÊï∞Âä†‰∏ästopÂáΩÊï∞
    USER_FNC();              // Áî®Êà∑Ëá™ÂÆö‰πâÂ§ÑÁêÜÂáΩÊï?
    memset(DATA_BUFF, 0, Size);
    DATA_SIZE = Size;
  }
	else if (huart->Instance == USART3)
  {
    // ËøôÈáåÁöÑDMA‰∏∫NormalÊ®°Âºè
    HAL_UART_DMAStop(huart); // Â¶ÇÊûúDMA‰∏∫CircularÊ®°ÂºèÔºåÂõûË∞ÉÂáΩÊï∞Âä†‰∏ästopÂáΩÊï∞
    //USER_FNC();              // Áî®Êà∑Ëá™ÂÆö‰πâÂ§ÑÁêÜÂáΩÊï?
    memset(DATA3_BUFF, 0, Size);
    DATA3_SIZE = Size;
  }
}
/* USER CODE END 4 */

/**
  * @brief  Period elapsed callback in non blocking mode
  * @note   This function is called  when TIM1 interrupt took place, inside
  * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
