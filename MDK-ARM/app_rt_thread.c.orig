#include "rtthread.h"
#include "main.h"
#include "stdio.h"
#include "adc.h"
#include "usart.h"
#include "gpio.h"
#include "String.h"
#include "ds18b20.h"
#include "NMEA0183.h"
#include "cJSON.h"
#include "cJSON_test.h"

uint16_t location_check_count = 1;

struct rt_thread led_thread;
rt_uint8_t rt_led_thread_stack[128];
void led_task_entry(void *parameter);

struct rt_thread ADC_thread;
rt_uint8_t rt_ADC_thread_stack[512];
void ADC_task_entry(void *parameter);

struct rt_thread Location_thread;
rt_uint8_t rt_Location_thread_stack[1024];
void StartTask_Location(void *parameter);

struct rt_thread temperature_thread;
rt_uint8_t rt_temperature_thread_stack[512];
void temperature_task_entry(void *parameter);

typedef struct _Location_struct
{
    uint8_t satellite_count;//卫星数量
    uint8_t hdop;//水平精度
    uint8_t quality_indicator;//定位状况
    double ground_speed;
    double ground_course;
    double lng;
    double lat;
    double alt;
    uint8_t year;
    uint8_t month;
    uint8_t day;
    uint8_t hour;
    uint8_t min;
    uint8_t sec;
} Location_struct;


typedef struct _GreenWaterPioneer_struct
{
    Location_struct Location;
    double Temperature;
    double PH;
    double Turbidity;
} GreenWaterPioneer_struct;

uint8_t DATA_BUFF[2048];
uint16_t DATA_SIZE = 0;

extern UART_HandleTypeDef huart2;
extern DMA_HandleTypeDef hdma_usart2_rx;
uint16_t ADC_Value[20];
uint8_t i;
uint16_t adc1, adc2;
float ADC_Vol1, ADC_Vol2;

float Temp = 25.0;

unsigned int index = 0;

// 初始化线程函数
void MX_RT_Thread_Init(void)
{
    // 初始化LED线程
    rt_thread_init(&led_thread, "led", led_task_entry, RT_NULL,
                   &rt_led_thread_stack[0], sizeof(rt_led_thread_stack), 2, 20);
    rt_thread_init(&ADC_thread, "ADC", ADC_task_entry, RT_NULL,
                   &rt_ADC_thread_stack[0], sizeof(rt_ADC_thread_stack), 4, 20);
    rt_thread_init(&Location_thread, "Location", StartTask_Location, RT_NULL,
                   &rt_Location_thread_stack[0], sizeof(rt_Location_thread_stack), 3, 20);
    rt_thread_init(&temperature_thread, "temperature", temperature_task_entry, RT_NULL,
                   &rt_temperature_thread_stack[0], sizeof(rt_temperature_thread_stack), 5, 20);
    // 开启线程调度
    rt_thread_startup(&led_thread);
    rt_thread_startup(&ADC_thread);
    rt_thread_startup(&Location_thread);
    rt_thread_startup(&temperature_thread);
}

// 主任务
void MX_RT_Thread_Process(void)
{
    // printf("Hello RT_Thread!!!\r\n");
    rt_thread_delay(2000);
}

// LED任务
void led_task_entry(void *parameter)
{
    while (1)
    {
        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
        rt_thread_delay(50);
        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
        rt_thread_delay(50);
    }
}

// ADC任务
void ADC_task_entry(void *parameter)
{
    while (1)
    {
        //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
        //printf("adc1: ");
        adc1 = 0;
        adc2 = 0;
        for(i = 0; i < 20; i ++)
        {
            if(i % 2 == 0)
            {
                adc1 += ADC_Value[i];
                //printf("%4d ",ADC_Value[i]);
            }
            else
                adc2 += ADC_Value[i];
        }
        /*
        printf("\r\nadc2: ");
        for(i = 0; i < 20; i ++)
        {
        	if(i%2){
        		//adc2 += ADC_Value[i];
        		printf("%4d ",ADC_Value[i]);
        	}
        }

        printf("\r\n");
        printf("adc1相加: %d , adc2相加: %d\r\n",adc1,adc2);
        */
        adc1 /= 10;
        adc2 /= 10;
        //printf("adc1:%d, adc1:%d\r\n",adc1,adc2);
        ADC_Vol1 = (float)adc1 / 4096 * 3.3;//转换电压
        ADC_Vol2 = (float)adc2 / 4096 * 3.3;//转换电压
        //printf("Voltage 1(C0): %.3f V, Voltage 2(C1): %.3f V\r\n", ADC_Vol1, ADC_Vol2);
        //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
        rt_thread_delay(500);
    }
}

/* USER CODE BEGIN Header_StartTask_Location */
/**
 * @brief Function implementing the Task_Location thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask_Location */
void StartTask_Location(void *parameter)
{
    /* USER CODE BEGIN StartTask_Location */
    /* Infinite loop */
    while (1)
    {
        // myprintf(&huart1,"解析代码成功 ");
        /*
        if(GPS_SENTENCE_GGA != 0)
        	printf("GPS_SENTENCE_GGA:%d\r\n",
        					GPS_SENTENCE_GGA);
        */
        if (nmea0183.gpsParse.new_satellite_count != 0)
            printf("卫星数量:%d,水平精度:%d,定位状况:%s\r\n", nmea0183.gpsParse.new_satellite_count, nmea0183.gpsParse.new_hdop, nmea0183.gpsParse.new_quality_indicator ? "定位成功" : "正在定位");
        if (nmea0183.gpsData.ground_speed != 0)
            printf("地面速度:%.3fkm/h,地面航向:%.3f\r\n", nmea0183.gpsData.ground_speed, nmea0183.gpsData.ground_course);
        if (nmea0183.gpsData.location.lng != 0)
            printf("东经:%f,北纬:%f,海拔:%.2f米\r\n", nmea0183.gpsData.location.lng, nmea0183.gpsData.location.lat, (float)nmea0183.gpsData.location.alt / 100);
        if (nmea0183.gpsData.date_time.year != 0)
            printf("卫星UTC时间:20%d-%d-%d %02d:%02d:%02d\r\n", nmea0183.gpsData.date_time.year, nmea0183.gpsData.date_time.month, nmea0183.gpsData.date_time.day, nmea0183.gpsData.date_time.hour, nmea0183.gpsData.date_time.min, nmea0183.gpsData.date_time.sec);
        else if (location_check_count == 0 && nmea0183.gpsData.location.lng == 0 && nmea0183.gpsParse.new_satellite_count == 0)
        {
            location_check_count = 1;
            //printf("正在搜星......\r\n");
            // HAL_UART_DeInit(&huart2);
            //USART2_Change(9600);
            //myprintf(&huart2, "$PCAS01,5*19\r\n");
            // HAL_UART_DeInit(&huart2);
            //USART2_Change(115200);
            //memset(DATA_BUFF, 0, 2048);
            //HAL_UARTEx_ReceiveToIdle_DMA(&huart2, DATA_BUFF, 2048); //开启串口DMA接收
            rt_thread_delay(500);
        }
        rt_thread_delay(1000);
        location_check_count--;
    }
    /* USER CODE END StartTask_Location */
}

// LED任务
void temperature_task_entry(void *parameter)
{
    while (1)
    {
        DS18B20_GetTemperature(); //获取温度
        Temp = (float)DS18B20_TempDataStruct.TempDataAll / 100;
        printf("温度:%.2f\r\n", Temp);
        //HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
        rt_thread_delay(1000);
    }
}

/* Create a bunch of objects as demonstration. */
void create_objects(void)
{
    /* declare a few. */
    cJSON *root = NULL;
    cJSON *fmt = NULL;
    cJSON *fld = NULL;

    /* Our array of "records": */
    GreenWaterPioneer_struct GreenWaterPioneer;

    /* Our array of "records": */
    root = cJSON_CreateArray();

    cJSON_AddItemToArray(root, fld = cJSON_CreateObject());
    cJSON_AddNumberToObject(fld, "Temperature", GreenWaterPioneer.Temperature);
    cJSON_AddNumberToObject(fld, "PH", GreenWaterPioneer.PH);
    cJSON_AddNumberToObject(fld, "Turbidity", GreenWaterPioneer.Turbidity);
    cJSON_AddItemToArray(fld, fmt = cJSON_CreateObject());
    cJSON_AddNumberToObject(fmt, "Satellite_count", GreenWaterPioneer.Location.satellite_count);
    cJSON_AddNumberToObject(fmt, "Satellite_count", GreenWaterPioneer.Location.satellite_count);
	cJSON_AddNumberToObject(fmt, "Satellite_count", GreenWaterPioneer.Location.satellite_count);
    cJSON_AddNumberToObject(fmt, "Satellite_count", GreenWaterPioneer.Location.satellite_count);
	cJSON_AddNumberToObject(fmt, "Satellite_count", GreenWaterPioneer.Location.satellite_count);
    cJSON_AddNumberToObject(fmt, "Satellite_count", GreenWaterPioneer.Location.satellite_count);
		cJSON_AddNumberToObject(fmt, "Satellite_count", GreenWaterPioneer.Location.satellite_count);
    cJSON_AddNumberToObject(fmt, "Satellite_count", GreenWaterPioneer.Location.satellite_count);
		cJSON_AddNumberToObject(fmt, "Satellite_count", GreenWaterPioneer.Location.satellite_count);
    cJSON_AddNumberToObject(fmt, "Satellite_count", GreenWaterPioneer.Location.satellite_count);
		cJSON_AddNumberToObject(fmt, "Satellite_count", GreenWaterPioneer.Location.satellite_count);
    cJSON_AddNumberToObject(fmt, "Satellite_count", GreenWaterPioneer.Location.satellite_count);
		cJSON_AddNumberToObject(fmt, "Satellite_count", GreenWaterPioneer.Location.satellite_count);
    cJSON_AddNumberToObject(fmt, "Satellite_count", GreenWaterPioneer.Location.satellite_count);
		cJSON_AddNumberToObject(fmt, "Satellite_count", GreenWaterPioneer.Location.satellite_count);
    cJSON_AddNumberToObject(fmt, "Satellite_count", GreenWaterPioneer.Location.satellite_count);


    /* cJSON_ReplaceItemInObject(cJSON_GetArrayItem(root, 1), "City", cJSON_CreateIntArray(ids, 4)); */

    if (print_preallocated(root) != 0)
    {
        cJSON_Delete(root);
        exit2(exit_FAILURE);
    }
    cJSON_Delete(root);
}

